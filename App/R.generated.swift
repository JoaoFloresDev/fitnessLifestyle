//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.segue` struct is generated, and contains static references to 7 view controllers.
  struct segue {
    /// This struct is generated for `AddDatedMealViewController`, and contains static references to 1 segues.
    struct addDatedMealViewController {
      /// Segue identifier `toAboutMeal`.
      static let toAboutMeal: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AddDatedMealViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toAboutMeal")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toAboutMeal`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toAboutMeal(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AddDatedMealViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.addDatedMealViewController.toAboutMeal, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `CalendarViewController`, and contains static references to 1 segues.
    struct calendarViewController {
      /// Segue identifier `toMealHistory`.
      static let toMealHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CalendarViewController, MealHistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toMealHistory")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toMealHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMealHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CalendarViewController, MealHistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.calendarViewController.toMealHistory, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MealHistoryViewController`, and contains static references to 1 segues.
    struct mealHistoryViewController {
      /// Segue identifier `toRegisterMeal`.
      static let toRegisterMeal: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MealHistoryViewController, AddDatedMealViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toRegisterMeal")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toRegisterMeal`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toRegisterMeal(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MealHistoryViewController, AddDatedMealViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mealHistoryViewController.toRegisterMeal, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `MealViewController`, and contains static references to 2 segues.
    struct mealViewController {
      /// Segue identifier `toAboutMeal`.
      static let toAboutMeal: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MealViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toAboutMeal")
      /// Segue identifier `toNoteModal`.
      static let toNoteModal: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MealViewController, AddNoteViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toNoteModal")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toAboutMeal`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toAboutMeal(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MealViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mealViewController.toAboutMeal, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toNoteModal`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toNoteModal(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MealViewController, AddNoteViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.mealViewController.toNoteModal, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `NotificationSettingsViewController`, and contains static references to 1 segues.
    struct notificationSettingsViewController {
      /// Segue identifier `toNotificationDetails`.
      static let toNotificationDetails: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, NotificationSettingsViewController, NotificationDetailsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toNotificationDetails")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toNotificationDetails`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toNotificationDetails(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, NotificationSettingsViewController, NotificationDetailsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.notificationSettingsViewController.toNotificationDetails, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `ProfileViewController`, and contains static references to 1 segues.
    struct profileViewController {
      /// Segue identifier `toEditData`.
      static let toEditData: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, EditDataViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toEditData")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toEditData`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toEditData(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileViewController, EditDataViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.toEditData, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    /// This struct is generated for `SettingsViewController`, and contains static references to 5 segues.
    struct settingsViewController {
      /// Segue identifier `toAboutMeal`.
      static let toAboutMeal: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toAboutMeal")
      /// Segue identifier `toCredits`.
      static let toCredits: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, HowToUseViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toCredits")
      /// Segue identifier `toHowToUse`.
      static let toHowToUse: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, HowToUseViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toHowToUse")
      /// Segue identifier `toMealHistory`.
      static let toMealHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, MealHistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toMealHistory")
      /// Segue identifier `toNotificationSettings`.
      static let toNotificationSettings: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, NotificationSettingsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "toNotificationSettings")

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toAboutMeal`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toAboutMeal(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.toAboutMeal, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toCredits`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toCredits(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, HowToUseViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.toCredits, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toHowToUse`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toHowToUse(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, HowToUseViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.toHowToUse, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toMealHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toMealHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, MealHistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.toMealHistory, segue: segue)
      }
      #endif

      #if os(iOS) || os(tvOS)
      /// Optionally returns a typed version of segue `toNotificationSettings`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func toNotificationSettings(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, NotificationSettingsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.toNotificationSettings, segue: segue)
      }
      #endif

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `Calendar`.
    static let calendar = _R.storyboard.calendar()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MealHistory`.
    static let mealHistory = _R.storyboard.mealHistory()
    /// Storyboard `Meals`.
    static let meals = _R.storyboard.meals()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Calendar", bundle: ...)`
    static func calendar(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.calendar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MealHistory", bundle: ...)`
    static func mealHistory(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.mealHistory)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Meals", bundle: ...)`
    static func meals(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.meals)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 10 colors.
  struct color {
    /// Color `BackgrondColor`.
    static let backgrondColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BackgrondColor")
    /// Color `BadColor`.
    static let badColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BadColor")
    /// Color `CellColor`.
    static let cellColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "CellColor")
    /// Color `GoodColor`.
    static let goodColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "GoodColor")
    /// Color `MediumColor`.
    static let mediumColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "MediumColor")
    /// Color `PrimaryTextColor`.
    static let primaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "PrimaryTextColor")
    /// Color `SecundaryTextColor`.
    static let secundaryTextColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecundaryTextColor")
    /// Color `habitsExerciceColor`.
    static let habitsExerciceColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "habitsExerciceColor")
    /// Color `habitsFruitsColor`.
    static let habitsFruitsColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "habitsFruitsColor")
    /// Color `habitsWaterColor`.
    static let habitsWaterColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "habitsWaterColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BackgrondColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgrondColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgrondColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BadColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func badColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.badColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "CellColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cellColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cellColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "GoodColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func goodColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.goodColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "MediumColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mediumColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mediumColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "PrimaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func primaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.primaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecundaryTextColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secundaryTextColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secundaryTextColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "habitsExerciceColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func habitsExerciceColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.habitsExerciceColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "habitsFruitsColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func habitsFruitsColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.habitsFruitsColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "habitsWaterColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func habitsWaterColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.habitsWaterColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"

    struct comAppleDeveloperIcloudContainerIdentifiers {
      fileprivate init() {}
    }

    struct comAppleDeveloperIcloudServices {
      static let cloudKit = infoPlistString(path: ["com.apple.developer.icloud-services"], key: "CloudKit") ?? "CloudKit"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 19 images.
  struct image {
    /// Image `ExerciseIcon`.
    static let exerciseIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "ExerciseIcon")
    /// Image `ProfileImgPlaceholder`.
    static let profileImgPlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfileImgPlaceholder")
    /// Image `ProfilePlaceholder`.
    static let profilePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "ProfilePlaceholder")
    /// Image `Slide 1`.
    static let slide1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide 1")
    /// Image `Slide 2`.
    static let slide2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide 2")
    /// Image `Slide 3`.
    static let slide3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide 3")
    /// Image `Slide 4`.
    static let slide4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide 4")
    /// Image `Slide 5`.
    static let slide5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Slide 5")
    /// Image `fruits`.
    static let fruits = Rswift.ImageResource(bundle: R.hostingBundle, name: "fruits")
    /// Image `gabitLogo`.
    static let gabitLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "gabitLogo")
    /// Image `habitCycle`.
    static let habitCycle = Rswift.ImageResource(bundle: R.hostingBundle, name: "habitCycle")
    /// Image `iconLandscape`.
    static let iconLandscape = Rswift.ImageResource(bundle: R.hostingBundle, name: "iconLandscape")
    /// Image `tutorial 1`.
    static let tutorial1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial 1")
    /// Image `tutorial 2`.
    static let tutorial2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial 2")
    /// Image `tutorial 3`.
    static let tutorial3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial 3")
    /// Image `tutorial 4`.
    static let tutorial4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial 4")
    /// Image `tutorial 5`.
    static let tutorial5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial 5")
    /// Image `tutorial 6`.
    static let tutorial6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "tutorial 6")
    /// Image `water`.
    static let water = Rswift.ImageResource(bundle: R.hostingBundle, name: "water")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ExerciseIcon", bundle: ..., traitCollection: ...)`
    static func exerciseIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.exerciseIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfileImgPlaceholder", bundle: ..., traitCollection: ...)`
    static func profileImgPlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profileImgPlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ProfilePlaceholder", bundle: ..., traitCollection: ...)`
    static func profilePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.profilePlaceholder, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide 1", bundle: ..., traitCollection: ...)`
    static func slide1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide 2", bundle: ..., traitCollection: ...)`
    static func slide2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide 3", bundle: ..., traitCollection: ...)`
    static func slide3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide 4", bundle: ..., traitCollection: ...)`
    static func slide4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Slide 5", bundle: ..., traitCollection: ...)`
    static func slide5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.slide5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "fruits", bundle: ..., traitCollection: ...)`
    static func fruits(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fruits, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "gabitLogo", bundle: ..., traitCollection: ...)`
    static func gabitLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gabitLogo, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "habitCycle", bundle: ..., traitCollection: ...)`
    static func habitCycle(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.habitCycle, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "iconLandscape", bundle: ..., traitCollection: ...)`
    static func iconLandscape(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconLandscape, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial 1", bundle: ..., traitCollection: ...)`
    static func tutorial1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial 2", bundle: ..., traitCollection: ...)`
    static func tutorial2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial 3", bundle: ..., traitCollection: ...)`
    static func tutorial3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial 4", bundle: ..., traitCollection: ...)`
    static func tutorial4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial 5", bundle: ..., traitCollection: ...)`
    static func tutorial5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tutorial 6", bundle: ..., traitCollection: ...)`
    static func tutorial6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "water", bundle: ..., traitCollection: ...)`
    static func water(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.water, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 10 nibs.
  struct nib {
    /// Nib `DailyHabitsView`.
    static let dailyHabitsView = _R.nib._DailyHabitsView()
    /// Nib `GroupedHabitsView`.
    static let groupedHabitsView = _R.nib._GroupedHabitsView()
    /// Nib `LineChartTableViewCell`.
    static let lineChartTableViewCell = _R.nib._LineChartTableViewCell()
    /// Nib `MealHistoryHeader`.
    static let mealHistoryHeader = _R.nib._MealHistoryHeader()
    /// Nib `MealHistoryTableViewCell`.
    static let mealHistoryTableViewCell = _R.nib._MealHistoryTableViewCell()
    /// Nib `NotificationSettingsCell`.
    static let notificationSettingsCell = _R.nib._NotificationSettingsCell()
    /// Nib `PerformanceChartDotView`.
    static let performanceChartDotView = _R.nib._PerformanceChartDotView()
    /// Nib `RatingView`.
    static let ratingView = _R.nib._RatingView()
    /// Nib `RegisterMealView`.
    static let registerMealView = _R.nib._RegisterMealView()
    /// Nib `SingleHabitView`.
    static let singleHabitView = _R.nib._SingleHabitView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DailyHabitsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.dailyHabitsView) instead")
    static func dailyHabitsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dailyHabitsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GroupedHabitsView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.groupedHabitsView) instead")
    static func groupedHabitsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.groupedHabitsView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LineChartTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.lineChartTableViewCell) instead")
    static func lineChartTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.lineChartTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealHistoryHeader", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealHistoryHeader) instead")
    static func mealHistoryHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealHistoryHeader)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MealHistoryTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.mealHistoryTableViewCell) instead")
    static func mealHistoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.mealHistoryTableViewCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "NotificationSettingsCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.notificationSettingsCell) instead")
    static func notificationSettingsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationSettingsCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PerformanceChartDotView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.performanceChartDotView) instead")
    static func performanceChartDotView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.performanceChartDotView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RatingView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.ratingView) instead")
    static func ratingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ratingView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "RegisterMealView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.registerMealView) instead")
    static func registerMealView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.registerMealView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SingleHabitView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.singleHabitView) instead")
    static func singleHabitView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.singleHabitView)
    }
    #endif

    static func dailyHabitsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.dailyHabitsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func groupedHabitsView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.groupedHabitsView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func lineChartTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LineChartTableViewCell? {
      return R.nib.lineChartTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LineChartTableViewCell
    }

    static func mealHistoryHeader(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealHistoryHeader? {
      return R.nib.mealHistoryHeader.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealHistoryHeader
    }

    static func mealHistoryTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealHistoryTableViewCell? {
      return R.nib.mealHistoryTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealHistoryTableViewCell
    }

    static func notificationSettingsCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationSettingsCell? {
      return R.nib.notificationSettingsCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationSettingsCell
    }

    static func performanceChartDotView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.performanceChartDotView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func ratingView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.ratingView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func registerMealView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoundedView? {
      return R.nib.registerMealView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoundedView
    }

    static func singleHabitView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.singleHabitView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 7 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DateHeader`.
    static let dateHeader: Rswift.ReuseIdentifier<DateHeader> = Rswift.ReuseIdentifier(identifier: "DateHeader")
    /// Reuse identifier `LineChartTableViewCell`.
    static let lineChartTableViewCell: Rswift.ReuseIdentifier<LineChartTableViewCell> = Rswift.ReuseIdentifier(identifier: "LineChartTableViewCell")
    /// Reuse identifier `MealHistoryTableViewCell`.
    static let mealHistoryTableViewCell: Rswift.ReuseIdentifier<MealHistoryTableViewCell> = Rswift.ReuseIdentifier(identifier: "MealHistoryTableViewCell")
    /// Reuse identifier `NotificationSettingsCell`.
    static let notificationSettingsCell: Rswift.ReuseIdentifier<NotificationSettingsCell> = Rswift.ReuseIdentifier(identifier: "NotificationSettingsCell")
    /// Reuse identifier `PerformanceChart`.
    static let performanceChart: Rswift.ReuseIdentifier<My_Way.PerformanceChartCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "PerformanceChart")
    /// Reuse identifier `cellId`.
    static let cellId: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "cellId")
    /// Reuse identifier `dateCell`.
    static let dateCell: Rswift.ReuseIdentifier<DateCell> = Rswift.ReuseIdentifier(identifier: "dateCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 3 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      /// pt-BR translation: My Way
      ///
      /// Locales: pt-BR
      static let evcHfTOpText = Rswift.StringResource(key: "evc-hf-TOp.text", tableName: "LaunchScreen", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)

      /// pt-BR translation: My Way
      ///
      /// Locales: pt-BR
      static func evcHfTOpText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("evc-hf-TOp.text", tableName: "LaunchScreen", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "LaunchScreen", preferredLanguages: preferredLanguages) else {
          return "evc-hf-TOp.text"
        }

        return NSLocalizedString("evc-hf-TOp.text", tableName: "LaunchScreen", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 52 localization keys.
    struct localizable {
      /// en translation: All days
      ///
      /// Locales: en, pt-BR
      static let allDays = Rswift.StringResource(key: "allDays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Apr
      ///
      /// Locales: en, pt-BR
      static let apr = Rswift.StringResource(key: "apr", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Aug
      ///
      /// Locales: en, pt-BR
      static let aug = Rswift.StringResource(key: "aug", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, pt-BR
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Clear
      ///
      /// Locales: en, pt-BR
      static let clear = Rswift.StringResource(key: "clear", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Close
      ///
      /// Locales: en, pt-BR
      static let close = Rswift.StringResource(key: "close", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Dec
      ///
      /// Locales: en, pt-BR
      static let dec = Rswift.StringResource(key: "dec", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Details
      ///
      /// Locales: en, pt-BR
      static let detail = Rswift.StringResource(key: "detail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Diário
      ///
      /// Locales: en, pt-BR
      static let diary = Rswift.StringResource(key: "diary", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, pt-BR
      static let done = Rswift.StringResource(key: "done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, pt-BR
      static let edit = Rswift.StringResource(key: "edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Enter your goals and objectives on the '+' button  
      ///
      /// Locales: en, pt-BR
      static let inserTargetInstruction = Rswift.StringResource(key: "inserTargetInstruction", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Feb
      ///
      /// Locales: en, pt-BR
      static let feb = Rswift.StringResource(key: "feb", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Food Routine
      ///
      /// Locales: en, pt-BR
      static let foodRoutine = Rswift.StringResource(key: "foodRoutine", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: en, pt-BR
      static let friday = Rswift.StringResource(key: "friday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Fruits
      ///
      /// Locales: en, pt-BR
      static let fruits = Rswift.StringResource(key: "fruits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Good Habits
      ///
      /// Locales: en, pt-BR
      static let goodHabits = Rswift.StringResource(key: "goodHabits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Habit Detail
      ///
      /// Locales: en, pt-BR
      static let habitDetail = Rswift.StringResource(key: "habitDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Habits
      ///
      /// Locales: en, pt-BR
      static let habits = Rswift.StringResource(key: "habits", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Historic
      ///
      /// Locales: en, pt-BR
      static let historic = Rswift.StringResource(key: "historic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Insira a qualidade da alimentação no dia
      ///
      /// Locales: en, pt-BR
      static let foodRotineDescription = Rswift.StringResource(key: "foodRotineDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Insira os hábitos praticados no dia
      ///
      /// Locales: en, pt-BR
      static let habitDescription = Rswift.StringResource(key: "habitDescription", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Jan
      ///
      /// Locales: en, pt-BR
      static let jan = Rswift.StringResource(key: "jan", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Jul
      ///
      /// Locales: en, pt-BR
      static let jul = Rswift.StringResource(key: "jul", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Jun
      ///
      /// Locales: en, pt-BR
      static let jun = Rswift.StringResource(key: "jun", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Mar
      ///
      /// Locales: en, pt-BR
      static let mar = Rswift.StringResource(key: "mar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: May
      ///
      /// Locales: en, pt-BR
      static let may = Rswift.StringResource(key: "may", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Meal Date
      ///
      /// Locales: en, pt-BR
      static let foodTime = Rswift.StringResource(key: "foodTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Meals: day firstDay to day lastDay
      ///
      /// Locales: en, pt-BR
      static let weekDayMeals = Rswift.StringResource(key: "weekDayMeals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: en, pt-BR
      static let monday = Rswift.StringResource(key: "monday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: My goals
      ///
      /// Locales: en, pt-BR
      static let myTargets = Rswift.StringResource(key: "myTargets", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Nov
      ///
      /// Locales: en, pt-BR
      static let nov = Rswift.StringResource(key: "nov", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Oct
      ///
      /// Locales: en, pt-BR
      static let oct = Rswift.StringResource(key: "oct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Physical Exercise
      ///
      /// Locales: en, pt-BR
      static let physicalExercise = Rswift.StringResource(key: "physicalExercise", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Premium version
      ///
      /// Locales: en, pt-BR
      static let premiumVersion = Rswift.StringResource(key: "premiumVersion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: en, pt-BR
      static let saturday = Rswift.StringResource(key: "saturday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Save
      ///
      /// Locales: en, pt-BR
      static let save = Rswift.StringResource(key: "save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Sep
      ///
      /// Locales: en, pt-BR
      static let sep = Rswift.StringResource(key: "sep", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, pt-BR
      static let settings = Rswift.StringResource(key: "settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, pt-BR
      static let start = Rswift.StringResource(key: "start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Summary
      ///
      /// Locales: en, pt-BR
      static let resume = Rswift.StringResource(key: "resume", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: en, pt-BR
      static let sunday = Rswift.StringResource(key: "sunday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: en, pt-BR
      static let thursday = Rswift.StringResource(key: "thursday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Try again
      ///
      /// Locales: en, pt-BR
      static let tryAgain = Rswift.StringResource(key: "tryAgain", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Try again later
      ///
      /// Locales: en, pt-BR
      static let errorMessage = Rswift.StringResource(key: "errorMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: en, pt-BR
      static let tuesday = Rswift.StringResource(key: "tuesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Unexpected error
      ///
      /// Locales: en, pt-BR
      static let errorTitle = Rswift.StringResource(key: "errorTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Water
      ///
      /// Locales: en, pt-BR
      static let water = Rswift.StringResource(key: "water", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: en, pt-BR
      static let wednesday = Rswift.StringResource(key: "wednesday", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Weight
      ///
      /// Locales: en, pt-BR
      static let weight = Rswift.StringResource(key: "weight", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Weight Details
      ///
      /// Locales: en, pt-BR
      static let weightDetail = Rswift.StringResource(key: "weightDetail", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)
      /// en translation: Your data has been updated
      ///
      /// Locales: en, pt-BR
      static let updateProfileData = Rswift.StringResource(key: "updateProfileData", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "pt-BR"], comment: nil)

      /// en translation: All days
      ///
      /// Locales: en, pt-BR
      static func allDays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("allDays", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "allDays"
        }

        return NSLocalizedString("allDays", bundle: bundle, comment: "")
      }

      /// en translation: Apr
      ///
      /// Locales: en, pt-BR
      static func apr(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("apr", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "apr"
        }

        return NSLocalizedString("apr", bundle: bundle, comment: "")
      }

      /// en translation: Aug
      ///
      /// Locales: en, pt-BR
      static func aug(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("aug", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "aug"
        }

        return NSLocalizedString("aug", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, pt-BR
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cancel"
        }

        return NSLocalizedString("cancel", bundle: bundle, comment: "")
      }

      /// en translation: Clear
      ///
      /// Locales: en, pt-BR
      static func clear(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("clear", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "clear"
        }

        return NSLocalizedString("clear", bundle: bundle, comment: "")
      }

      /// en translation: Close
      ///
      /// Locales: en, pt-BR
      static func close(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("close", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "close"
        }

        return NSLocalizedString("close", bundle: bundle, comment: "")
      }

      /// en translation: Dec
      ///
      /// Locales: en, pt-BR
      static func dec(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dec", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dec"
        }

        return NSLocalizedString("dec", bundle: bundle, comment: "")
      }

      /// en translation: Details
      ///
      /// Locales: en, pt-BR
      static func detail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("detail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "detail"
        }

        return NSLocalizedString("detail", bundle: bundle, comment: "")
      }

      /// en translation: Diário
      ///
      /// Locales: en, pt-BR
      static func diary(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("diary", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "diary"
        }

        return NSLocalizedString("diary", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, pt-BR
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "done"
        }

        return NSLocalizedString("done", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, pt-BR
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "edit"
        }

        return NSLocalizedString("edit", bundle: bundle, comment: "")
      }

      /// en translation: Enter your goals and objectives on the '+' button  
      ///
      /// Locales: en, pt-BR
      static func inserTargetInstruction(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("inserTargetInstruction", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "inserTargetInstruction"
        }

        return NSLocalizedString("inserTargetInstruction", bundle: bundle, comment: "")
      }

      /// en translation: Feb
      ///
      /// Locales: en, pt-BR
      static func feb(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("feb", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "feb"
        }

        return NSLocalizedString("feb", bundle: bundle, comment: "")
      }

      /// en translation: Food Routine
      ///
      /// Locales: en, pt-BR
      static func foodRoutine(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("foodRoutine", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "foodRoutine"
        }

        return NSLocalizedString("foodRoutine", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: en, pt-BR
      static func friday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("friday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "friday"
        }

        return NSLocalizedString("friday", bundle: bundle, comment: "")
      }

      /// en translation: Fruits
      ///
      /// Locales: en, pt-BR
      static func fruits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("fruits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "fruits"
        }

        return NSLocalizedString("fruits", bundle: bundle, comment: "")
      }

      /// en translation: Good Habits
      ///
      /// Locales: en, pt-BR
      static func goodHabits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("goodHabits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "goodHabits"
        }

        return NSLocalizedString("goodHabits", bundle: bundle, comment: "")
      }

      /// en translation: Habit Detail
      ///
      /// Locales: en, pt-BR
      static func habitDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("habitDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "habitDetail"
        }

        return NSLocalizedString("habitDetail", bundle: bundle, comment: "")
      }

      /// en translation: Habits
      ///
      /// Locales: en, pt-BR
      static func habits(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("habits", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "habits"
        }

        return NSLocalizedString("habits", bundle: bundle, comment: "")
      }

      /// en translation: Historic
      ///
      /// Locales: en, pt-BR
      static func historic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("historic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "historic"
        }

        return NSLocalizedString("historic", bundle: bundle, comment: "")
      }

      /// en translation: Insira a qualidade da alimentação no dia
      ///
      /// Locales: en, pt-BR
      static func foodRotineDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("foodRotineDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "foodRotineDescription"
        }

        return NSLocalizedString("foodRotineDescription", bundle: bundle, comment: "")
      }

      /// en translation: Insira os hábitos praticados no dia
      ///
      /// Locales: en, pt-BR
      static func habitDescription(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("habitDescription", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "habitDescription"
        }

        return NSLocalizedString("habitDescription", bundle: bundle, comment: "")
      }

      /// en translation: Jan
      ///
      /// Locales: en, pt-BR
      static func jan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jan", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jan"
        }

        return NSLocalizedString("jan", bundle: bundle, comment: "")
      }

      /// en translation: Jul
      ///
      /// Locales: en, pt-BR
      static func jul(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jul", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jul"
        }

        return NSLocalizedString("jul", bundle: bundle, comment: "")
      }

      /// en translation: Jun
      ///
      /// Locales: en, pt-BR
      static func jun(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("jun", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "jun"
        }

        return NSLocalizedString("jun", bundle: bundle, comment: "")
      }

      /// en translation: Mar
      ///
      /// Locales: en, pt-BR
      static func mar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("mar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "mar"
        }

        return NSLocalizedString("mar", bundle: bundle, comment: "")
      }

      /// en translation: May
      ///
      /// Locales: en, pt-BR
      static func may(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("may", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "may"
        }

        return NSLocalizedString("may", bundle: bundle, comment: "")
      }

      /// en translation: Meal Date
      ///
      /// Locales: en, pt-BR
      static func foodTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("foodTime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "foodTime"
        }

        return NSLocalizedString("foodTime", bundle: bundle, comment: "")
      }

      /// en translation: Meals: day firstDay to day lastDay
      ///
      /// Locales: en, pt-BR
      static func weekDayMeals(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weekDayMeals", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weekDayMeals"
        }

        return NSLocalizedString("weekDayMeals", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: en, pt-BR
      static func monday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("monday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "monday"
        }

        return NSLocalizedString("monday", bundle: bundle, comment: "")
      }

      /// en translation: My goals
      ///
      /// Locales: en, pt-BR
      static func myTargets(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("myTargets", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "myTargets"
        }

        return NSLocalizedString("myTargets", bundle: bundle, comment: "")
      }

      /// en translation: Nov
      ///
      /// Locales: en, pt-BR
      static func nov(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("nov", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "nov"
        }

        return NSLocalizedString("nov", bundle: bundle, comment: "")
      }

      /// en translation: Oct
      ///
      /// Locales: en, pt-BR
      static func oct(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("oct", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "oct"
        }

        return NSLocalizedString("oct", bundle: bundle, comment: "")
      }

      /// en translation: Physical Exercise
      ///
      /// Locales: en, pt-BR
      static func physicalExercise(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("physicalExercise", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "physicalExercise"
        }

        return NSLocalizedString("physicalExercise", bundle: bundle, comment: "")
      }

      /// en translation: Premium version
      ///
      /// Locales: en, pt-BR
      static func premiumVersion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("premiumVersion", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "premiumVersion"
        }

        return NSLocalizedString("premiumVersion", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: en, pt-BR
      static func saturday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("saturday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "saturday"
        }

        return NSLocalizedString("saturday", bundle: bundle, comment: "")
      }

      /// en translation: Save
      ///
      /// Locales: en, pt-BR
      static func save(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("save", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "save"
        }

        return NSLocalizedString("save", bundle: bundle, comment: "")
      }

      /// en translation: Sep
      ///
      /// Locales: en, pt-BR
      static func sep(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sep", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sep"
        }

        return NSLocalizedString("sep", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, pt-BR
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "settings"
        }

        return NSLocalizedString("settings", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, pt-BR
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "start"
        }

        return NSLocalizedString("start", bundle: bundle, comment: "")
      }

      /// en translation: Summary
      ///
      /// Locales: en, pt-BR
      static func resume(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("resume", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "resume"
        }

        return NSLocalizedString("resume", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: en, pt-BR
      static func sunday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("sunday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "sunday"
        }

        return NSLocalizedString("sunday", bundle: bundle, comment: "")
      }

      /// en translation: Thu
      ///
      /// Locales: en, pt-BR
      static func thursday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("thursday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "thursday"
        }

        return NSLocalizedString("thursday", bundle: bundle, comment: "")
      }

      /// en translation: Try again
      ///
      /// Locales: en, pt-BR
      static func tryAgain(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tryAgain", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tryAgain"
        }

        return NSLocalizedString("tryAgain", bundle: bundle, comment: "")
      }

      /// en translation: Try again later
      ///
      /// Locales: en, pt-BR
      static func errorMessage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorMessage", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorMessage"
        }

        return NSLocalizedString("errorMessage", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: en, pt-BR
      static func tuesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("tuesday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "tuesday"
        }

        return NSLocalizedString("tuesday", bundle: bundle, comment: "")
      }

      /// en translation: Unexpected error
      ///
      /// Locales: en, pt-BR
      static func errorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("errorTitle", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "errorTitle"
        }

        return NSLocalizedString("errorTitle", bundle: bundle, comment: "")
      }

      /// en translation: Water
      ///
      /// Locales: en, pt-BR
      static func water(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("water", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "water"
        }

        return NSLocalizedString("water", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: en, pt-BR
      static func wednesday(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("wednesday", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "wednesday"
        }

        return NSLocalizedString("wednesday", bundle: bundle, comment: "")
      }

      /// en translation: Weight
      ///
      /// Locales: en, pt-BR
      static func weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weight"
        }

        return NSLocalizedString("weight", bundle: bundle, comment: "")
      }

      /// en translation: Weight Details
      ///
      /// Locales: en, pt-BR
      static func weightDetail(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weightDetail", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weightDetail"
        }

        return NSLocalizedString("weightDetail", bundle: bundle, comment: "")
      }

      /// en translation: Your data has been updated
      ///
      /// Locales: en, pt-BR
      static func updateProfileData(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("updateProfileData", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "updateProfileData"
        }

        return NSLocalizedString("updateProfileData", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    /// This `R.string.main` struct is generated, and contains static references to 5 localization keys.
    struct main {
      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static let iUsRsXTitle = Rswift.StringResource(key: "71i-Us-RsX.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static let r9TG5zxTitle = Rswift.StringResource(key: "9r9-tG-5zx.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static let tgcUlP5bTitle = Rswift.StringResource(key: "Tgc-Ul-p5b.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static let zqw4uY9BTitle = Rswift.StringResource(key: "Zqw-4u-y9B.title", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)
      /// pt-BR translation: start
      ///
      /// Locales: pt-BR
      static let cjKGTlKNormalTitle = Rswift.StringResource(key: "5cj-KG-tlK.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["pt-BR"], comment: nil)

      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static func iUsRsXTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("71i-Us-RsX.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "71i-Us-RsX.title"
        }

        return NSLocalizedString("71i-Us-RsX.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static func r9TG5zxTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("9r9-tG-5zx.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "9r9-tG-5zx.title"
        }

        return NSLocalizedString("9r9-tG-5zx.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static func tgcUlP5bTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tgc-Ul-p5b.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Tgc-Ul-p5b.title"
        }

        return NSLocalizedString("Tgc-Ul-p5b.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// pt-BR translation: Item
      ///
      /// Locales: pt-BR
      static func zqw4uY9BTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Zqw-4u-y9B.title", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "Zqw-4u-y9B.title"
        }

        return NSLocalizedString("Zqw-4u-y9B.title", tableName: "Main", bundle: bundle, comment: "")
      }

      /// pt-BR translation: start
      ///
      /// Locales: pt-BR
      static func cjKGTlKNormalTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("5cj-KG-tlK.normalTitle", tableName: "Main", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Main", preferredLanguages: preferredLanguages) else {
          return "5cj-KG-tlK.normalTitle"
        }

        return NSLocalizedString("5cj-KG-tlK.normalTitle", tableName: "Main", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _MealHistoryHeader.validate()
      try _RegisterMealView.validate()
    }

    struct _DailyHabitsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DailyHabitsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _GroupedHabitsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GroupedHabitsView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _LineChartTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LineChartTableViewCell

      let bundle = R.hostingBundle
      let identifier = "LineChartTableViewCell"
      let name = "LineChartTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> LineChartTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LineChartTableViewCell
      }

      fileprivate init() {}
    }

    struct _MealHistoryHeader: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MealHistoryHeader"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealHistoryHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealHistoryHeader
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in nib 'MealHistoryHeader', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _MealHistoryTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MealHistoryTableViewCell

      let bundle = R.hostingBundle
      let identifier = "MealHistoryTableViewCell"
      let name = "MealHistoryTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> MealHistoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MealHistoryTableViewCell
      }

      fileprivate init() {}
    }

    struct _NotificationSettingsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = NotificationSettingsCell

      let bundle = R.hostingBundle
      let identifier = "NotificationSettingsCell"
      let name = "NotificationSettingsCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> NotificationSettingsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationSettingsCell
      }

      fileprivate init() {}
    }

    struct _PerformanceChartDotView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PerformanceChartDotView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RatingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RatingView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _RegisterMealView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RegisterMealView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> RoundedView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RoundedView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "info.circle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'info.circle' is used in nib 'RegisterMealView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "square.and.pencil", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'square.and.pencil' is used in nib 'RegisterMealView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SingleHabitView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SingleHabitView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try calendar.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try mealHistory.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try meals.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try profile.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try settings.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct calendar: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let bundle = R.hostingBundle
      let calendarStoryboard = StoryboardViewControllerResource<CalendarViewController>(identifier: "Calendar Storyboard")
      let name = "Calendar"

      func calendarStoryboard(_: Void = ()) -> CalendarViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: calendarStoryboard)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "calendar", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'calendar' is used in storyboard 'Calendar', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BadColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BadColor' is used in storyboard 'Calendar', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecundaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecundaryTextColor' is used in storyboard 'Calendar', but couldn't be loaded.") }
          if UIKit.UIColor(named: "rateRedColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'rateRedColor' is used in storyboard 'Calendar', but couldn't be loaded.") }
        }
        if _R.storyboard.calendar().calendarStoryboard() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'calendarStoryboard' could not be loaded from storyboard 'Calendar' as 'CalendarViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "gabitLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gabitLogo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITabBarController

      let bundle = R.hostingBundle
      let name = "Main"
      let tutorial = StoryboardViewControllerResource<TutorialViewController>(identifier: "Tutorial")

      func tutorial(_: Void = ()) -> TutorialViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: tutorial)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.main().tutorial() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'tutorial' could not be loaded from storyboard 'Main' as 'TutorialViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct mealHistory: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MealHistoryViewController

      let bundle = R.hostingBundle
      let name = "MealHistory"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct meals: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let addNoteViewController = StoryboardViewControllerResource<AddNoteViewController>(identifier: "AddNoteViewController")
      let bundle = R.hostingBundle
      let mealNavigationViewController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MealNavigationViewController")
      let name = "Meals"

      func addNoteViewController(_: Void = ()) -> AddNoteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNoteViewController)
      }

      func mealNavigationViewController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mealNavigationViewController)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "plus.app.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus.app.fill' is used in storyboard 'Meals', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.meals().addNoteViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNoteViewController' could not be loaded from storyboard 'Meals' as 'AddNoteViewController'.") }
        if _R.storyboard.meals().mealNavigationViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mealNavigationViewController' could not be loaded from storyboard 'Meals' as 'UIKit.UINavigationController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController

      let bundle = R.hostingBundle
      let name = "Profile"

      static func validate() throws {
        if UIKit.UIImage(named: "ExerciseIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ExerciseIcon' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ProfileImgPlaceholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ProfileImgPlaceholder' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "fruits", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'fruits' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "person.fill", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'person.fill' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'plus' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "water", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'water' is used in storyboard 'Profile', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgrondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgrondColor' is used in storyboard 'Profile', but couldn't be loaded.") }
          if UIKit.UIColor(named: "CellColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'CellColor' is used in storyboard 'Profile', but couldn't be loaded.") }
          if UIKit.UIColor(named: "PrimaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PrimaryTextColor' is used in storyboard 'Profile', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecundaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecundaryTextColor' is used in storyboard 'Profile', but couldn't be loaded.") }
          if UIKit.UIColor(named: "rateGreenColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'rateGreenColor' is used in storyboard 'Profile', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct settings: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController

      let aboutMeal = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "aboutMeal")
      let bundle = R.hostingBundle
      let name = "Settings"

      func aboutMeal(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutMeal)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "gear", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'gear' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "habitCycle", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'habitCycle' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial 1' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial 2' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial 3' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial 4' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 5", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial 5' is used in storyboard 'Settings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "tutorial 6", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'tutorial 6' is used in storyboard 'Settings', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BackgrondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BackgrondColor' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "BadColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BadColor' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "GoodColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'GoodColor' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "MediumColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'MediumColor' is used in storyboard 'Settings', but couldn't be loaded.") }
          if UIKit.UIColor(named: "PrimaryTextColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'PrimaryTextColor' is used in storyboard 'Settings', but couldn't be loaded.") }
        }
        if _R.storyboard.settings().aboutMeal() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutMeal' could not be loaded from storyboard 'Settings' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
